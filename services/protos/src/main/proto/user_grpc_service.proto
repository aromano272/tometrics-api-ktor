syntax = "proto3";

import "google/protobuf/wrappers.proto";
import "google/protobuf/struct.proto";

option java_package = "com.tometrics.api.services.protos";
option java_multiple_files = true;

enum ClimateZone {
  CLIMATE_ZONE_TEMPERATE = 0;
  CLIMATE_ZONE_MEDITERRANEAN = 1;
  CLIMATE_ZONE_CONTINENTAL = 2;
  CLIMATE_ZONE_TROPICAL = 3;
  CLIMATE_ZONE_ARID = 4;
}

message FindLocationByIdResponse {
  optional LocationInfo location = 1;
//  oneof result {
//    LocationInfo location = 1;
//    google.protobuf.NullValue null_value = 2;
//  }
}

message FindUserByIdResponse {
  optional User user = 1;
}

message LocationInfo {
  int32 id = 1;
  string city = 2;
  string country = 3;
  string country_code = 4;
}

message User {
  int32 id = 1;
  string name = 2;
  optional LocationInfo location = 3;
  optional ClimateZone climate_zone = 4;
  int64 updated_at = 5;
}

message GetAllUsersByIdsRequest {
  repeated int32 user_ids = 1;
}

message GetAllUsersByIdsResponse {
  repeated User users = 1;
}

message ValidateUserIdsRequest {
  repeated int32 user_ids = 1;
}

message ValidateUsersSuccess {
}

message ValidateUsersNotFound {
  repeated int32 missing_user_ids = 1;
}

message ValidateUserIdsResponse {
  oneof result {
    ValidateUsersSuccess success = 1;
    ValidateUsersNotFound not_found = 2;
  }
}

service UserGrpcService {
  rpc validateUserIds(ValidateUserIdsRequest) returns (ValidateUserIdsResponse);
  rpc getAllUsersByIds(GetAllUsersByIdsRequest) returns (GetAllUsersByIdsResponse);
  rpc findLocationById(google.protobuf.Int32Value) returns (FindLocationByIdResponse);
  rpc findUserById(google.protobuf.Int32Value) returns (FindUserByIdResponse);
}
